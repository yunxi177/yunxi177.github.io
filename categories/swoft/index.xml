<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swoft on 一二三四吾</title>
    <link>http://www.artacode.com/categories/swoft/</link>
    <description>Recent content in Swoft on 一二三四吾</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 05 Aug 2018 11:08:39 +0800</lastBuildDate>
    
	<atom:link href="http://www.artacode.com/categories/swoft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SwoftUnit</title>
      <link>http://www.artacode.com/posts/swoftunit/</link>
      <pubDate>Sun, 05 Aug 2018 11:08:39 +0800</pubDate>
      
      <guid>http://www.artacode.com/posts/swoftunit/</guid>
      <description>&lt;h2 id=&#34;1-1-为什么要使用单元测试&#34;&gt;1.1 为什么要使用单元测试&lt;/h2&gt;

&lt;p&gt;在编写代码的过程中，一定会反复调试保证它能够编译通过。但代码通过编译，只是说明了它的语法正确。无法保证它的语义也一定正确，没有任何人可以轻易承诺这段代码的行为一定是正确的。幸运的是，单元测试会为我们的承诺做保证。编写单元测试就是用来验证这段代码的行为是否与我们期望的一致。有了单元测试，我们可以自信地交付自己的代码，减少后顾之忧。&lt;br /&gt;
   
进行单元测试，会带来以下好处：
- 软件质量最简单、最有效的保证；
- 是目标代码最清晰、最有效的文档；
- 可以优化目标代码的设计；
- 是代码重构的保障；
- 是回归测试和持续集成的基石。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>